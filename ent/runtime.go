// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/hvturingga/ya/ent/daemon"
	"github.com/hvturingga/ya/ent/provider"
	"github.com/hvturingga/ya/ent/schema"
	"github.com/hvturingga/ya/ent/subscribe"
	"github.com/hvturingga/ya/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	daemonFields := schema.Daemon{}.Fields()
	_ = daemonFields
	// daemonDescEnable is the schema descriptor for enable field.
	daemonDescEnable := daemonFields[1].Descriptor()
	// daemon.DefaultEnable holds the default value on creation for the enable field.
	daemon.DefaultEnable = daemonDescEnable.Default.(bool)
	providerFields := schema.Provider{}.Fields()
	_ = providerFields
	// providerDescName is the schema descriptor for name field.
	providerDescName := providerFields[0].Descriptor()
	// provider.NameValidator is a validator for the "name" field. It is called by the builders before save.
	provider.NameValidator = providerDescName.Validators[0].(func(string) error)
	// providerDescVersion is the schema descriptor for version field.
	providerDescVersion := providerFields[1].Descriptor()
	// provider.VersionValidator is a validator for the "version" field. It is called by the builders before save.
	provider.VersionValidator = providerDescVersion.Validators[0].(func(string) error)
	// providerDescPath is the schema descriptor for path field.
	providerDescPath := providerFields[2].Descriptor()
	// provider.PathValidator is a validator for the "path" field. It is called by the builders before save.
	provider.PathValidator = providerDescPath.Validators[0].(func(string) error)
	subscribeFields := schema.Subscribe{}.Fields()
	_ = subscribeFields
	// subscribeDescName is the schema descriptor for name field.
	subscribeDescName := subscribeFields[0].Descriptor()
	// subscribe.NameValidator is a validator for the "name" field. It is called by the builders before save.
	subscribe.NameValidator = func() func(string) error {
		validators := subscribeDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// subscribeDescConf is the schema descriptor for conf field.
	subscribeDescConf := subscribeFields[2].Descriptor()
	// subscribe.ConfValidator is a validator for the "conf" field. It is called by the builders before save.
	subscribe.ConfValidator = subscribeDescConf.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescActive is the schema descriptor for active field.
	userDescActive := userFields[1].Descriptor()
	// user.DefaultActive holds the default value on creation for the active field.
	user.DefaultActive = userDescActive.Default.(bool)
}
