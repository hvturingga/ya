// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hvturingga/ya/ent/node"
	"github.com/hvturingga/ya/ent/provider"
	"github.com/hvturingga/ya/ent/subscribe"
	"github.com/hvturingga/ya/ent/user"
)

// SubscribeCreate is the builder for creating a Subscribe entity.
type SubscribeCreate struct {
	config
	mutation *SubscribeMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (sc *SubscribeCreate) SetName(s string) *SubscribeCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetLink sets the "link" field.
func (sc *SubscribeCreate) SetLink(s string) *SubscribeCreate {
	sc.mutation.SetLink(s)
	return sc
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (sc *SubscribeCreate) SetNillableLink(s *string) *SubscribeCreate {
	if s != nil {
		sc.SetLink(*s)
	}
	return sc
}

// SetConf sets the "conf" field.
func (sc *SubscribeCreate) SetConf(s string) *SubscribeCreate {
	sc.mutation.SetConf(s)
	return sc
}

// SetProviderID sets the "provider" edge to the Provider entity by ID.
func (sc *SubscribeCreate) SetProviderID(id int) *SubscribeCreate {
	sc.mutation.SetProviderID(id)
	return sc
}

// SetNillableProviderID sets the "provider" edge to the Provider entity by ID if the given value is not nil.
func (sc *SubscribeCreate) SetNillableProviderID(id *int) *SubscribeCreate {
	if id != nil {
		sc = sc.SetProviderID(*id)
	}
	return sc
}

// SetProvider sets the "provider" edge to the Provider entity.
func (sc *SubscribeCreate) SetProvider(p *Provider) *SubscribeCreate {
	return sc.SetProviderID(p.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (sc *SubscribeCreate) SetUserID(id int) *SubscribeCreate {
	sc.mutation.SetUserID(id)
	return sc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (sc *SubscribeCreate) SetNillableUserID(id *int) *SubscribeCreate {
	if id != nil {
		sc = sc.SetUserID(*id)
	}
	return sc
}

// SetUser sets the "user" edge to the User entity.
func (sc *SubscribeCreate) SetUser(u *User) *SubscribeCreate {
	return sc.SetUserID(u.ID)
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (sc *SubscribeCreate) AddNodeIDs(ids ...int) *SubscribeCreate {
	sc.mutation.AddNodeIDs(ids...)
	return sc
}

// AddNodes adds the "nodes" edges to the Node entity.
func (sc *SubscribeCreate) AddNodes(n ...*Node) *SubscribeCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return sc.AddNodeIDs(ids...)
}

// Mutation returns the SubscribeMutation object of the builder.
func (sc *SubscribeCreate) Mutation() *SubscribeMutation {
	return sc.mutation
}

// Save creates the Subscribe in the database.
func (sc *SubscribeCreate) Save(ctx context.Context) (*Subscribe, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SubscribeCreate) SaveX(ctx context.Context) *Subscribe {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SubscribeCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SubscribeCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SubscribeCreate) check() error {
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Subscribe.name"`)}
	}
	if v, ok := sc.mutation.Name(); ok {
		if err := subscribe.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Subscribe.name": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Conf(); !ok {
		return &ValidationError{Name: "conf", err: errors.New(`ent: missing required field "Subscribe.conf"`)}
	}
	if v, ok := sc.mutation.Conf(); ok {
		if err := subscribe.ConfValidator(v); err != nil {
			return &ValidationError{Name: "conf", err: fmt.Errorf(`ent: validator failed for field "Subscribe.conf": %w`, err)}
		}
	}
	return nil
}

func (sc *SubscribeCreate) sqlSave(ctx context.Context) (*Subscribe, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SubscribeCreate) createSpec() (*Subscribe, *sqlgraph.CreateSpec) {
	var (
		_node = &Subscribe{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(subscribe.Table, sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(subscribe.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Link(); ok {
		_spec.SetField(subscribe.FieldLink, field.TypeString, value)
		_node.Link = value
	}
	if value, ok := sc.mutation.Conf(); ok {
		_spec.SetField(subscribe.FieldConf, field.TypeString, value)
		_node.Conf = value
	}
	if nodes := sc.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribe.ProviderTable,
			Columns: []string{subscribe.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(provider.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.provider_subscribes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subscribe.UserTable,
			Columns: []string{subscribe.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.NodesTable,
			Columns: []string{subscribe.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SubscribeCreateBulk is the builder for creating many Subscribe entities in bulk.
type SubscribeCreateBulk struct {
	config
	err      error
	builders []*SubscribeCreate
}

// Save creates the Subscribe entities in the database.
func (scb *SubscribeCreateBulk) Save(ctx context.Context) ([]*Subscribe, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Subscribe, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscribeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SubscribeCreateBulk) SaveX(ctx context.Context) []*Subscribe {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SubscribeCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SubscribeCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
