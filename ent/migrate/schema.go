// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// DaemonsColumns holds the columns for the "daemons" table.
	DaemonsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "path", Type: field.TypeString},
		{Name: "enable", Type: field.TypeBool, Default: false},
	}
	// DaemonsTable holds the schema information for the "daemons" table.
	DaemonsTable = &schema.Table{
		Name:       "daemons",
		Columns:    DaemonsColumns,
		PrimaryKey: []*schema.Column{DaemonsColumns[0]},
	}
	// NodesColumns holds the columns for the "nodes" table.
	NodesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "group", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "subscribe_nodes", Type: field.TypeInt, Nullable: true},
	}
	// NodesTable holds the schema information for the "nodes" table.
	NodesTable = &schema.Table{
		Name:       "nodes",
		Columns:    NodesColumns,
		PrimaryKey: []*schema.Column{NodesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "nodes_subscribes_nodes",
				Columns:    []*schema.Column{NodesColumns[3]},
				RefColumns: []*schema.Column{SubscribesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProvidersColumns holds the columns for the "providers" table.
	ProvidersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "version", Type: field.TypeString, Nullable: true},
		{Name: "path", Type: field.TypeString, Nullable: true},
	}
	// ProvidersTable holds the schema information for the "providers" table.
	ProvidersTable = &schema.Table{
		Name:       "providers",
		Columns:    ProvidersColumns,
		PrimaryKey: []*schema.Column{ProvidersColumns[0]},
	}
	// SubscribesColumns holds the columns for the "subscribes" table.
	SubscribesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Size: 24},
		{Name: "link", Type: field.TypeString, Nullable: true},
		{Name: "conf", Type: field.TypeString},
		{Name: "provider_subscribes", Type: field.TypeInt, Nullable: true},
	}
	// SubscribesTable holds the schema information for the "subscribes" table.
	SubscribesTable = &schema.Table{
		Name:       "subscribes",
		Columns:    SubscribesColumns,
		PrimaryKey: []*schema.Column{SubscribesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "subscribes_providers_subscribes",
				Columns:    []*schema.Column{SubscribesColumns[4]},
				RefColumns: []*schema.Column{ProvidersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "daemon_user", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "provider_user", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "subscribe_user", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_daemons_user",
				Columns:    []*schema.Column{UsersColumns[1]},
				RefColumns: []*schema.Column{DaemonsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "users_providers_user",
				Columns:    []*schema.Column{UsersColumns[2]},
				RefColumns: []*schema.Column{ProvidersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "users_subscribes_user",
				Columns:    []*schema.Column{UsersColumns[3]},
				RefColumns: []*schema.Column{SubscribesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		DaemonsTable,
		NodesTable,
		ProvidersTable,
		SubscribesTable,
		UsersTable,
	}
)

func init() {
	NodesTable.ForeignKeys[0].RefTable = SubscribesTable
	SubscribesTable.ForeignKeys[0].RefTable = ProvidersTable
	UsersTable.ForeignKeys[0].RefTable = DaemonsTable
	UsersTable.ForeignKeys[1].RefTable = ProvidersTable
	UsersTable.ForeignKeys[2].RefTable = SubscribesTable
}
