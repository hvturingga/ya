// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hvturingga/ya/ent/daemon"
	"github.com/hvturingga/ya/ent/predicate"
	"github.com/hvturingga/ya/ent/user"
)

// DaemonUpdate is the builder for updating Daemon entities.
type DaemonUpdate struct {
	config
	hooks    []Hook
	mutation *DaemonMutation
}

// Where appends a list predicates to the DaemonUpdate builder.
func (du *DaemonUpdate) Where(ps ...predicate.Daemon) *DaemonUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetPath sets the "path" field.
func (du *DaemonUpdate) SetPath(s string) *DaemonUpdate {
	du.mutation.SetPath(s)
	return du
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (du *DaemonUpdate) SetNillablePath(s *string) *DaemonUpdate {
	if s != nil {
		du.SetPath(*s)
	}
	return du
}

// SetEnable sets the "enable" field.
func (du *DaemonUpdate) SetEnable(b bool) *DaemonUpdate {
	du.mutation.SetEnable(b)
	return du
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (du *DaemonUpdate) SetNillableEnable(b *bool) *DaemonUpdate {
	if b != nil {
		du.SetEnable(*b)
	}
	return du
}

// SetUserID sets the "user" edge to the User entity by ID.
func (du *DaemonUpdate) SetUserID(id int) *DaemonUpdate {
	du.mutation.SetUserID(id)
	return du
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (du *DaemonUpdate) SetNillableUserID(id *int) *DaemonUpdate {
	if id != nil {
		du = du.SetUserID(*id)
	}
	return du
}

// SetUser sets the "user" edge to the User entity.
func (du *DaemonUpdate) SetUser(u *User) *DaemonUpdate {
	return du.SetUserID(u.ID)
}

// Mutation returns the DaemonMutation object of the builder.
func (du *DaemonUpdate) Mutation() *DaemonMutation {
	return du.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (du *DaemonUpdate) ClearUser() *DaemonUpdate {
	du.mutation.ClearUser()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DaemonUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DaemonUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DaemonUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DaemonUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DaemonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(daemon.Table, daemon.Columns, sqlgraph.NewFieldSpec(daemon.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Path(); ok {
		_spec.SetField(daemon.FieldPath, field.TypeString, value)
	}
	if value, ok := du.mutation.Enable(); ok {
		_spec.SetField(daemon.FieldEnable, field.TypeBool, value)
	}
	if du.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   daemon.UserTable,
			Columns: []string{daemon.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   daemon.UserTable,
			Columns: []string{daemon.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{daemon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DaemonUpdateOne is the builder for updating a single Daemon entity.
type DaemonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DaemonMutation
}

// SetPath sets the "path" field.
func (duo *DaemonUpdateOne) SetPath(s string) *DaemonUpdateOne {
	duo.mutation.SetPath(s)
	return duo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (duo *DaemonUpdateOne) SetNillablePath(s *string) *DaemonUpdateOne {
	if s != nil {
		duo.SetPath(*s)
	}
	return duo
}

// SetEnable sets the "enable" field.
func (duo *DaemonUpdateOne) SetEnable(b bool) *DaemonUpdateOne {
	duo.mutation.SetEnable(b)
	return duo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (duo *DaemonUpdateOne) SetNillableEnable(b *bool) *DaemonUpdateOne {
	if b != nil {
		duo.SetEnable(*b)
	}
	return duo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (duo *DaemonUpdateOne) SetUserID(id int) *DaemonUpdateOne {
	duo.mutation.SetUserID(id)
	return duo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (duo *DaemonUpdateOne) SetNillableUserID(id *int) *DaemonUpdateOne {
	if id != nil {
		duo = duo.SetUserID(*id)
	}
	return duo
}

// SetUser sets the "user" edge to the User entity.
func (duo *DaemonUpdateOne) SetUser(u *User) *DaemonUpdateOne {
	return duo.SetUserID(u.ID)
}

// Mutation returns the DaemonMutation object of the builder.
func (duo *DaemonUpdateOne) Mutation() *DaemonMutation {
	return duo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (duo *DaemonUpdateOne) ClearUser() *DaemonUpdateOne {
	duo.mutation.ClearUser()
	return duo
}

// Where appends a list predicates to the DaemonUpdate builder.
func (duo *DaemonUpdateOne) Where(ps ...predicate.Daemon) *DaemonUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DaemonUpdateOne) Select(field string, fields ...string) *DaemonUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Daemon entity.
func (duo *DaemonUpdateOne) Save(ctx context.Context) (*Daemon, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DaemonUpdateOne) SaveX(ctx context.Context) *Daemon {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DaemonUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DaemonUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DaemonUpdateOne) sqlSave(ctx context.Context) (_node *Daemon, err error) {
	_spec := sqlgraph.NewUpdateSpec(daemon.Table, daemon.Columns, sqlgraph.NewFieldSpec(daemon.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Daemon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, daemon.FieldID)
		for _, f := range fields {
			if !daemon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != daemon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Path(); ok {
		_spec.SetField(daemon.FieldPath, field.TypeString, value)
	}
	if value, ok := duo.mutation.Enable(); ok {
		_spec.SetField(daemon.FieldEnable, field.TypeBool, value)
	}
	if duo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   daemon.UserTable,
			Columns: []string{daemon.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   daemon.UserTable,
			Columns: []string{daemon.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Daemon{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{daemon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
