// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hvturingga/ya/ent/daemon"
	"github.com/hvturingga/ya/ent/user"
)

// DaemonCreate is the builder for creating a Daemon entity.
type DaemonCreate struct {
	config
	mutation *DaemonMutation
	hooks    []Hook
}

// SetPath sets the "path" field.
func (dc *DaemonCreate) SetPath(s string) *DaemonCreate {
	dc.mutation.SetPath(s)
	return dc
}

// SetEnable sets the "enable" field.
func (dc *DaemonCreate) SetEnable(b bool) *DaemonCreate {
	dc.mutation.SetEnable(b)
	return dc
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (dc *DaemonCreate) SetNillableEnable(b *bool) *DaemonCreate {
	if b != nil {
		dc.SetEnable(*b)
	}
	return dc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (dc *DaemonCreate) SetUserID(id int) *DaemonCreate {
	dc.mutation.SetUserID(id)
	return dc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (dc *DaemonCreate) SetNillableUserID(id *int) *DaemonCreate {
	if id != nil {
		dc = dc.SetUserID(*id)
	}
	return dc
}

// SetUser sets the "user" edge to the User entity.
func (dc *DaemonCreate) SetUser(u *User) *DaemonCreate {
	return dc.SetUserID(u.ID)
}

// Mutation returns the DaemonMutation object of the builder.
func (dc *DaemonCreate) Mutation() *DaemonMutation {
	return dc.mutation
}

// Save creates the Daemon in the database.
func (dc *DaemonCreate) Save(ctx context.Context) (*Daemon, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DaemonCreate) SaveX(ctx context.Context) *Daemon {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DaemonCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DaemonCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DaemonCreate) defaults() {
	if _, ok := dc.mutation.Enable(); !ok {
		v := daemon.DefaultEnable
		dc.mutation.SetEnable(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DaemonCreate) check() error {
	if _, ok := dc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "Daemon.path"`)}
	}
	if _, ok := dc.mutation.Enable(); !ok {
		return &ValidationError{Name: "enable", err: errors.New(`ent: missing required field "Daemon.enable"`)}
	}
	return nil
}

func (dc *DaemonCreate) sqlSave(ctx context.Context) (*Daemon, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DaemonCreate) createSpec() (*Daemon, *sqlgraph.CreateSpec) {
	var (
		_node = &Daemon{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(daemon.Table, sqlgraph.NewFieldSpec(daemon.FieldID, field.TypeInt))
	)
	if value, ok := dc.mutation.Path(); ok {
		_spec.SetField(daemon.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := dc.mutation.Enable(); ok {
		_spec.SetField(daemon.FieldEnable, field.TypeBool, value)
		_node.Enable = value
	}
	if nodes := dc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   daemon.UserTable,
			Columns: []string{daemon.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DaemonCreateBulk is the builder for creating many Daemon entities in bulk.
type DaemonCreateBulk struct {
	config
	err      error
	builders []*DaemonCreate
}

// Save creates the Daemon entities in the database.
func (dcb *DaemonCreateBulk) Save(ctx context.Context) ([]*Daemon, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Daemon, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DaemonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DaemonCreateBulk) SaveX(ctx context.Context) []*Daemon {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DaemonCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DaemonCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
