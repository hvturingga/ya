// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/hvturingga/ya/ent/daemon"
	"github.com/hvturingga/ya/ent/user"
)

// Daemon is the model entity for the Daemon schema.
type Daemon struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Enable holds the value of the "enable" field.
	Enable bool `json:"enable,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DaemonQuery when eager-loading is set.
	Edges        DaemonEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DaemonEdges holds the relations/edges for other nodes in the graph.
type DaemonEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DaemonEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Daemon) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case daemon.FieldEnable:
			values[i] = new(sql.NullBool)
		case daemon.FieldID:
			values[i] = new(sql.NullInt64)
		case daemon.FieldPath:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Daemon fields.
func (d *Daemon) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case daemon.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case daemon.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				d.Path = value.String
			}
		case daemon.FieldEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable", values[i])
			} else if value.Valid {
				d.Enable = value.Bool
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Daemon.
// This includes values selected through modifiers, order, etc.
func (d *Daemon) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Daemon entity.
func (d *Daemon) QueryUser() *UserQuery {
	return NewDaemonClient(d.config).QueryUser(d)
}

// Update returns a builder for updating this Daemon.
// Note that you need to call Daemon.Unwrap() before calling this method if this Daemon
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Daemon) Update() *DaemonUpdateOne {
	return NewDaemonClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Daemon entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Daemon) Unwrap() *Daemon {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Daemon is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Daemon) String() string {
	var builder strings.Builder
	builder.WriteString("Daemon(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("path=")
	builder.WriteString(d.Path)
	builder.WriteString(", ")
	builder.WriteString("enable=")
	builder.WriteString(fmt.Sprintf("%v", d.Enable))
	builder.WriteByte(')')
	return builder.String()
}

// Daemons is a parsable slice of Daemon.
type Daemons []*Daemon
